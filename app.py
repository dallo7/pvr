# -*- coding: utf-8 -*-
from dash import html, dcc, Output, Input, State
import dash_bootstrap_components as dbc
import dash
import base64


def b64_image(image_filename):
    with open(image_filename, 'rb') as f:
        image = f.read()
    return 'data:image/png;base64,' + base64.b64encode(image).decode('utf-8')


img = "pvs.png"

app = dash.Dash(__name__, external_stylesheets=[dbc.themes.QUARTZ], title='Rhys')

server = app.server

app.layout = dbc.Container([
    dbc.Row([
        dbc.Col([

        ], width=2),
        dbc.Col([
            dbc.Card(
                [
                    dbc.CardImg(src=b64_image(img), top=True),
                ], style={'marginBottom': 15, 'marginTop': 15, 'font-family': 'cursive',
                          'text-align': 'center', 'color': '#00FFFF',
                          'fontSize': 20})
        ], width=8)
    ]),
    html.Br(),
    html.Br(),
    dbc.Row([
        dbc.Col([
            html.U(dbc.Label("How does the verification happen?", style={'text-decoration': 'underline'})),
            html.Br(),
            html.P('☑️	Importer quotes are compared against the regulators’ rates.'),
            html.P('☑️  The generated report sent to the importer mail has QR code signed by the system'
                   ' and will be verified by Customs.'),
        ], width=4),
        dbc.Col([
            html.U(dbc.Label("Two main advantages of the PVS?", style={'text-decoration': 'underline'})),
            html.Br(),
            html.P('☑️  Improves transparency.'),
            html.P('☑️  Levels the playing field'),
        ], width=4),
        dbc.Col([
            html.U(dbc.Label("The model assumes?", style={'text-decoration': 'underline'})),
            html.Br(),
            html.P('☑️  All importers/Exporters must use the system.'),
            html.P('☑️  PVR must be presented along with the current documentation.'),
            html.P('☑️  PVR QR code will be scanned to verify it’s generated by PVS'),
        ], width=4)
    ]),
    dbc.Row(
        [
            html.Div([html.P(['Importer Quotation Checker!'], id='import',
                             style={'marginBottom': 15, 'marginTop': 15, 'font-family': 'cursive',
                                    'text-align': 'center', 'color': '#00FFFF',
                                    'fontSize': 20})]),
            html.Br(),
            html.Br(),
            dbc.Row([

                dbc.Col([
                    html.Div([
                        dbc.Label('Product'),
                        dcc.Dropdown(['metal', 'oil', 'gas', 'maize', 'wheat'
                                      ], multi=False, placeholder='product', id='product', clearable=True,
                                     optionHeight=50),
                    ], style={'marginBottom': 15, 'marginTop': 5, 'color': 'Green', 'fontSize': 14}),
                    dbc.FormText('Please enter product'),
                    html.Div([
                        dbc.Label('Quote'),
                        dcc.Dropdown([1000, 2000, 2500, 3000, 4500, 4000, 5000, 6000, 0
                                      ], multi=False, placeholder='quote', id='quote', clearable=True, optionHeight=50)
                    ], style={'marginBottom': 15, 'marginTop': 5, 'color': 'Green', 'fontSize': 14}),
                    dbc.FormText('Please enter quote'),
                ], style={'width': '100%', 'height': 200, 'marginBottom': 15,
                          'marginTop': 15, 'color': '#00FFFF',
                          'font-family': 'cursive', 'fontSize': 14}),

                dbc.Col([
                    dbc.Label('Model Response',
                              style={'marginBottom': 15, 'color': '#800040', 'marginTop': 15, 'fontSize': 16}),
                    html.Div(id='parsed',
                             style={'marginBottom': 15, 'color': '#080040', 'marginTop': 15, 'fontSize': 14}),
                    html.Br(),
                    html.Br(),
                    dbc.Label('Email is sent to Importer and Customs',
                              style={'marginBottom': 15, 'color': '#800040', 'marginTop': 15, 'fontSize': 16}),
                    html.Div(id='email',
                             style={'marginBottom': 15, 'color': '#080040', 'marginTop': 15, 'fontSize': 14}),
                    html.Br(),
                ], style={'width': '100%', 'height': 200, 'marginBottom': 15,
                          'marginTop': 15, 'color': '#00FFFF', 'text-align': 'center',
                          'font-family': 'cursive', 'fontSize': 14})
            ]),
        ]),
    html.Button('Submit quote', id='submitTextarea', n_clicks=0,
                style={'marginBottom': 15, 'marginTop': 15, 'fontSize': 14}),
], style={'backgroundColor': 'F0E68C', 'marginTop': '20px', 'font-family': 'cursive', 'marginBottom': '40px',
          'border': '2px', 'color': 'cyan'})


@app.callback(Output('parsed', 'children'),
              Output('email', 'children'),
              Input('quote', 'value'),
              Input('product', 'value'),
              Input('submitTextarea', 'n_clicks'), prevent_initial_call=True)
def update_output(quote, product, n_clicks):
    if n_clicks > 1:
        import pandas as pd
        import pickle

        test = {'quote': quote, 'product': product}

        new_df = pd.DataFrame(test, index=[8])

        amp = pd.get_dummies(new_df)

        amp = amp.to_dict()

        sch = {'quote': {8: 0},
               'product_gas': {8: 0},
               'product_maize': {8: 0},
               'product_metal': {8: 0},
               'product_oil': {8: 0},
               'product_wheat': {8: 0}}

        test_df = {**sch, **amp}

        pred = pd.DataFrame(test_df, index=[8])

        with open('predicktor.pkl', 'rb') as f:
            predictor_load = pickle.load(f)

        parsed = predictor_load.predict(pred)[0]

        if parsed == 1:
            parsed = "Accepted"
        else:
            parsed = "Rejected"

        payload = f"Your quote for this product is {parsed}"

        return parsed, payload

    else:
        return dash.no_update, dash.no_update


if __name__ == "__main__":
    app.run_server(debug=True)
